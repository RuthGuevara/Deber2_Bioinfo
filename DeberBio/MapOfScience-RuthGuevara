{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Solution of 5.9.2, Map of Science \n",
    "### Basado en las sesiones de Visualización de datos y Expresiones resulares. Realice una adaptación de la solución del MAP OF SCIENCE. Se requiere dos adaptaciones para resolver esta actividad:\n",
    "\n",
    "- Buscar bibliografía de un tema de interés propio en la Página Web de PubMed,\n",
    "- Realizar el minado de autores por país (en el ejemplo se encuentra realziado por las ciudades de USA). Para asignar las ubicación geográfica de los centroides de cada país (latitud y longitud), utilice la tabla  Ubicación Geográfica de Países - Google Developer. Así como en la solución de referencia se señalan varias ciudades seleccionadas de USA, en su resolución señale/resalte a los siguientes países: USA, UK, Brazil, China, Australia, Norway.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ruth Guevara\n",
    "### Biotecnologia\n",
    "#### Se importa las librerias. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import csv\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Listado de países"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "with open('Datos/pubmed-covidnetwo-set.txt', errors = 'ignore') as f:\n",
    "    files = f.read()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6860474"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "File = re.sub(r'\\n\\s{6}','', files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PMID- 34427929\n",
      "OWN - NLM\n",
      "STAT- MEDLINE\n",
      "DCOM- 20211123\n",
      "LR  - 20211211\n",
      "IS  - 1096-9071 (Electronic)\n",
      "IS  - 0146-6615 (Print)\n",
      "IS  - 0146-6615 (Linking)\n",
      "VI  - 94\n",
      "IP  - 1\n",
      "DP  - 2022 Jan\n",
      "TI  - Autoimmune complications of COVID-19.\n",
      "PG  - 54-62\n",
      "LID - 10.1002/jmv.27292 [doi]\n",
      "AB  - Coronavirus disease 2019 (COVID-19) is still propagating a year after the start of the pandemic. Besides the complications patients face during the COVID-19 disease period, there is an accumulating body of evidence concerning the late-onset complications of COVID-19, of which autoimmune manifestations have attracted remarkable attention from the first months of the pandemic. Autoimmune hemolytic anemia, immune thrombocytopenic purpura, autoimmune thyroid diseases, Kawasaki disease, Guillain-Barre syndrome, and the detection of autoantibodies are the cues to the discovery of the potentialÂ of COVID-19 in inducing autoimmunity. Clarification of the pathophysiology of COVID-19 injuries to the host, whether it is direct viral injury or autoimmunity, could help to develop appropriate treatment.\n",
      "CI  - Â© 2021 Wiley Periodicals LLC.\n",
      "FAU - Yazdanpanah, Niloufar\n",
      "AU  - Yazdanpanah N\n",
      "AD  - Research Center for Immunodeficiencies, Children's Medical Center, Tehran University of Medical Sciences, Tehran, Iran.\n",
      "AD  - Network of Immunity in Infection, Malignancy and Autoimmunity (NIIMA), Universal Scientific Education and Research Network (USERN), Tehran, Iran.\n",
      "FAU - Rezaei, Nima\n",
      "AU  - Rezaei N\n",
      "AUID- ORCID: 0000-0002-3836-1827\n",
      "AD  - Research Center for Immunodeficiencies, Children's Medical Center, Tehran University of Medical Sciences, Tehran, Iran.\n",
      "AD  - Network of Immunity in Infection, Malignancy and Autoimmunity (NIIMA), Universal Scientific Education and Research Network (USERN), Tehran, Iran.\n",
      "AD  - Department of Immunology, School of Medicine, Tehran University of Medical Sciences, Tehran, Iran.\n",
      "LA  - eng\n",
      "PT  - Journal Article\n",
      "PT  - Review\n",
      "DEP - 20210831\n",
      "TA  - J Med Virol\n",
      "JT  - Journal of medical virology\n",
      "JI\n"
     ]
    }
   ],
   "source": [
    "print(File[:2000])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "My_files = re.findall(r\"\\,\\s[A-Z]+[A-z]{2,30}\\.\", File)\n",
    "unique_codes = list(set(My_files))\n",
    "unique_codes.sort()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[', Abbvie.', ', Afghanistan.', ', Alabama.', ', Algeria.', ', Alicante.', ', Alta.', ', Argentina.', ', Arizona.', ', Arkansas.', ', Augusta.', ', Aurora.', ', Australasia.', ', Australia.', ', Austria.', ', Avda.', ', Bahrain.', ', Bangkok.', ', Bangladesh.', ', Bangor.', ', Basel.', ', Bauhausstr.', ', Belarus.', ', Belgium.', ', Birmingham.', ', Blvd.', ', Bolivia.', ', Boston.', ', Botswana.', ', Brasil.', ', Brazil.', ', Bulgaria.', ', Burlington.', ', CIBERESP.', ', Calif.', ', California.', ', Cambodia.', ', Cameroon.', ', Canada.', ', Catalonia.', ', Chicago.', ', Chile.', ', China.', ', Coimbra.', ', Colombia.', ', Colorado.', ', Columbus.', ', Conn.', ', Connecticut.', ', Croatia.', ', Cuba.', ', Cuenca.', ', Cyprus.', ', Delaware.', ', Denmark.', ', Dept.', ', Detroit.', ', Deutschland.', ', Dijon.', ', ETH.', ', Ecuador.', ', Egyp.', ', Egypt.', ', England.', ', Eritrea.', ', Estonia.', ', Ethiopia.', ', Faisalabad.', ', Fiji.', ', Finland.', ', Florida.', ', France.', ', GBR.', ', Galveston.', ', Georgia.', ', Germany.', ', Ghana.', ', Gibraltar.', ', Grail.', ', Greece.', ', Guatemala.', ', Haiti.', ', Honduras.', ', Hongkong.', ', Houston.', ', Huelva.', ', Hungary.', ', IND.', ', Illinois.', ', Inc.', ', India.', ', Indiana.', ', Indonesia.', ', Iowa.', ', Iran.', ', Iraq.', ', Ireland.', ', Israel.', ', Italy.', ', Jamaica.', ', Japan.', ', Jordan.', ', Kazakhstan.', ', Kentucky.', ', Kenya.', ', Kinshasa.', ', Korea.', ', Kuwait.', ', Kyrgyzstan.', ', LLC.', ', Laos.', ', Latvia.', ', Lebanon.', ', Liberia.', ', LimaPeru.', ', Lithuania.', ', Louisiana.', ', Ltd.', ', Luxembourg.', ', Macao.', ', Macau.', ', Macedonia.', ', Madagascar.', ', Madison.', ', Madrid.', ', Malawi.', ', Malaysia.', ', Maldives.', ', Mali.', ', Malta.', ', Man.', ', Manitoba.', ', Maryland.', ', Massachusetts.', ', Mexico.', ', Miami.', ', Michigan.', ', Milwaukee.', ', Minnesota.', ', Mississippi.', ', Missouri.', ', Monaco.', ', Mongolia.', ', Montana.', ', Montenegro.', ', Mozambique.', ', Murcia.', ', Myanmar.', ', NOR.', ', Napoli.', ', Nebraska.', ', Nederland.', ', Nepal.', ', Netherlands.', ', Newark.', ', Nfld.', ', Nicaragua.', ', Nigeria.', ', Norway.', ', Ohio.', ', Oman.', ', Ont.', ', Ontario.', ', Oregon.', ', Oviedo.', ', Oxford.', ', Pakistan.', ', Palau.', ', Palestine.', ', Paraguay.', ', Paris.', ', Pennsylvania.', ', Peru.', ', Pfizer.', ', PhD.', ', Philadelphia.', ', Philippines.', ', Phoenix.', ', Poland.', ', Portugal.', ', Qatar.', ', Qld.', ', Que.', ', Queensland.', ', Remdesivir.', ', Rempartstr.', ', Roche.', ', Romania.', ', Russia.', ', Rwanda.', ', Sacramento.', ', Samoa.', ', Scotland.', ', Seattle.', ', Senegal.', ', Serbia.', ', Seres.', ', Shionogi.', ', Singapore.', ', Slovenia.', ', Spain.', ', Ste.', ', Sudan.', ', Sweden.', ', Switzerland.', ', Syria.', ', Taiwan.', ', Tanzania.', ', Tenerife.', ', Tennessee.', ', Texas.', ', Thailand.', ', Togo.', ', Tonga.', ', Toronto.', ', Tours.', ', Tunisia.', ', Turkey.', ', Tuvalu.', ', UAE.', ', USA.', ', Uganda.', ', Ukraine.', ', Uruguay.', ', Utah.', ', Valencia.', ', Valladolid.', ', Vanuatu.', ', Venezuela.', ', Vermont.', ', Vic.', ', Vietnam.', ', Virginia.', ', Wales.', ', Washington.', ', Wisconsin.', ', Yemen.', ', Zambia.', ', Zimbabwe.']\n"
     ]
    }
   ],
   "source": [
    "a = unique_codes\n",
    "print (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[', Abbvie.', ', Afghanistan.', ', Alabama.', ', Algeria.', ', Alicante.', ', Alta.', ', Argentina.', ', Arizona.', ', Arkansas.', ', Augusta.', ', Aurora.', ', Australasia.', ', Australia.', ', Austria.', ', Avda.', ', Bahrain.', ', Bangkok.', ', Bangladesh.', ', Bangor.', ', Basel.', ', Bauhausstr.', ', Belarus.', ', Belgium.', ', Birmingham.', ', Blvd.', ', Bolivia.', ', Boston.', ', Botswana.', ', Brasil.', ', Brazil.', ', Bulgaria.', ', Burlington.', ', CIBERESP.', ', Calif.', ', California.', ', Cambodia.', ', Cameroon.', ', Canada.', ', Catalonia.', ', Chicago.', ', Chile.', ', China.', ', Coimbra.', ', Colombia.', ', Colorado.', ', Columbus.', ', Conn.', ', Connecticut.', ', Croatia.', ', Cuba.', ', Cuenca.', ', Cyprus.', ', Delaware.', ', Denmark.', ', Dept.', ', Detroit.', ', Deutschland.', ', Dijon.', ', ETH.', ', Ecuador.', ', Egyp.', ', Egypt.', ', England.', ', Eritrea.', ', Estonia.', ', Ethiopia.', ', Faisalabad.', ', Fiji.', ', Finland.', ', Florida.', ', France.', ', GBR.', ', Galveston.', ', Georgia.', ', Germany.', ', Ghana.', ', Gibraltar.', ', Grail.', ', Greece.', ', Guatemala.', ', Haiti.', ', Honduras.', ', Hongkong.', ', Houston.', ', Huelva.', ', Hungary.', ', IND.', ', Illinois.', ', Inc.', ', India.', ', Indiana.', ', Indonesia.', ', Iowa.', ', Iran.', ', Iraq.', ', Ireland.', ', Israel.', ', Italy.', ', Jamaica.', ', Japan.', ', Jordan.', ', Kazakhstan.', ', Kentucky.', ', Kenya.', ', Kinshasa.', ', Korea.', ', Kuwait.', ', Kyrgyzstan.', ', LLC.', ', Laos.', ', Latvia.', ', Lebanon.', ', Liberia.', ', LimaPeru.', ', Lithuania.', ', Louisiana.', ', Ltd.', ', Luxembourg.', ', Macao.', ', Macau.', ', Macedonia.', ', Madagascar.', ', Madison.', ', Madrid.', ', Malawi.', ', Malaysia.', ', Maldives.', ', Mali.', ', Malta.', ', Man.', ', Manitoba.', ', Maryland.', ', Massachusetts.', ', Mexico.', ', Miami.', ', Michigan.', ', Milwaukee.', ', Minnesota.', ', Mississippi.', ', Missouri.', ', Monaco.', ', Mongolia.', ', Montana.', ', Montenegro.', ', Mozambique.', ', Murcia.', ', Myanmar.', ', NOR.', ', Napoli.', ', Nebraska.', ', Nederland.', ', Nepal.', ', Netherlands.', ', Newark.', ', Nfld.', ', Nicaragua.', ', Nigeria.', ', Norway.', ', Ohio.', ', Oman.', ', Ont.', ', Ontario.', ', Oregon.', ', Oviedo.', ', Oxford.', ', Pakistan.', ', Palau.', ', Palestine.', ', Paraguay.', ', Paris.', ', Pennsylvania.', ', Peru.', ', Pfizer.', ', PhD.', ', Philadelphia.', ', Philippines.', ', Phoenix.', ', Poland.', ', Portugal.', ', Qatar.', ', Qld.', ', Que.', ', Queensland.', ', Remdesivir.', ', Rempartstr.', ', Roche.', ', Romania.', ', Russia.', ', Rwanda.', ', Sacramento.', ', Samoa.', ', Scotland.', ', Seattle.', ', Senegal.', ', Serbia.', ', Seres.', ', Shionogi.', ', Singapore.', ', Slovenia.', ', Spain.', ', Ste.', ', Sudan.', ', Sweden.', ', Switzerland.', ', Syria.', ', Taiwan.', ', Tanzania.', ', Tenerife.', ', Tennessee.', ', Texas.', ', Thailand.', ', Togo.', ', Tonga.', ', Toronto.', ', Tours.', ', Tunisia.', ', Turkey.', ', Tuvalu.', ', UAE.', ', USA.', ', Uganda.', ', Ukraine.', ', Uruguay.', ', Utah.', ', Valencia.', ', Valladolid.', ', Vanuatu.', ', Venezuela.', ', Vermont.', ', Vic.', ', Vietnam.', ', Virginia.', ', Wales.', ', Washington.', ', Wisconsin.', ', Yemen.', ', Zambia.', ', Zimbabwe.']\n"
     ]
    }
   ],
   "source": [
    "print(r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = \"\".join(unique_codes)\n",
    "b = a.split(\", \")\n",
    "c = \"\".join(b)\n",
    "unique_zipcodes = c.split(\".\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[', Abbvie.', ', Afghanistan.', ', Alabama.', ', Algeria.', ', Alicante.', ', Alta.', ', Argentina.', ', Arizona.', ', Arkansas.', ', Augusta.', ', Aurora.', ', Australasia.', ', Australia.', ', Austria.', ', Avda.', ', Bahrain.', ', Bangkok.', ', Bangladesh.', ', Bangor.', ', Basel.', ', Bauhausstr.', ', Belarus.', ', Belgium.', ', Birmingham.', ', Blvd.', ', Bolivia.', ', Boston.', ', Botswana.', ', Brasil.', ', Brazil.']\n"
     ]
    }
   ],
   "source": [
    "print(unique_codes[:30])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "239"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(unique_zipcodes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AD</td>\n",
       "      <td>42.546245</td>\n",
       "      <td>1.601554</td>\n",
       "      <td>Andorra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AE</td>\n",
       "      <td>23.424076</td>\n",
       "      <td>53.847818</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AF</td>\n",
       "      <td>33.939110</td>\n",
       "      <td>67.709953</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AG</td>\n",
       "      <td>17.060816</td>\n",
       "      <td>-61.796428</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AI</td>\n",
       "      <td>18.220554</td>\n",
       "      <td>-63.068615</td>\n",
       "      <td>Anguilla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AL</td>\n",
       "      <td>41.153332</td>\n",
       "      <td>20.168331</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AM</td>\n",
       "      <td>40.069099</td>\n",
       "      <td>45.038189</td>\n",
       "      <td>Armenia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AN</td>\n",
       "      <td>12.226079</td>\n",
       "      <td>-69.060087</td>\n",
       "      <td>Netherlands Antilles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AO</td>\n",
       "      <td>-11.202692</td>\n",
       "      <td>17.873887</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AQ</td>\n",
       "      <td>-75.250973</td>\n",
       "      <td>-0.071389</td>\n",
       "      <td>Antarctica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AR</td>\n",
       "      <td>-38.416097</td>\n",
       "      <td>-63.616672</td>\n",
       "      <td>Argentina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AS</td>\n",
       "      <td>-14.270972</td>\n",
       "      <td>-170.132217</td>\n",
       "      <td>American Samoa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country   latitude   longitude                  name\n",
       "0       AD  42.546245    1.601554               Andorra\n",
       "1       AE  23.424076   53.847818  United Arab Emirates\n",
       "2       AF  33.939110   67.709953           Afghanistan\n",
       "3       AG  17.060816  -61.796428   Antigua and Barbuda\n",
       "4       AI  18.220554  -63.068615              Anguilla\n",
       "5       AL  41.153332   20.168331               Albania\n",
       "6       AM  40.069099   45.038189               Armenia\n",
       "7       AN  12.226079  -69.060087  Netherlands Antilles\n",
       "8       AO -11.202692   17.873887                Angola\n",
       "9       AQ -75.250973   -0.071389            Antarctica\n",
       "10      AR -38.416097  -63.616672             Argentina\n",
       "11      AS -14.270972 -170.132217        American Samoa"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "Coordenadas = pd.read_csv('Datos/data_Coordenadas.csv', engine='python', skipfooter=3)\n",
    "Coordenadas.head(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_País</th>\n",
       "      <th>Latitud</th>\n",
       "      <th>Longitud</th>\n",
       "      <th>Nombre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AD</td>\n",
       "      <td>42.546245</td>\n",
       "      <td>1.601554</td>\n",
       "      <td>Andorra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AE</td>\n",
       "      <td>23.424076</td>\n",
       "      <td>53.847818</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AF</td>\n",
       "      <td>33.939110</td>\n",
       "      <td>67.709953</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AG</td>\n",
       "      <td>17.060816</td>\n",
       "      <td>-61.796428</td>\n",
       "      <td>Antigua and Barbuda</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>AI</td>\n",
       "      <td>18.220554</td>\n",
       "      <td>-63.068615</td>\n",
       "      <td>Anguilla</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>AL</td>\n",
       "      <td>41.153332</td>\n",
       "      <td>20.168331</td>\n",
       "      <td>Albania</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AM</td>\n",
       "      <td>40.069099</td>\n",
       "      <td>45.038189</td>\n",
       "      <td>Armenia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AN</td>\n",
       "      <td>12.226079</td>\n",
       "      <td>-69.060087</td>\n",
       "      <td>Netherlands Antilles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>AO</td>\n",
       "      <td>-11.202692</td>\n",
       "      <td>17.873887</td>\n",
       "      <td>Angola</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>AQ</td>\n",
       "      <td>-75.250973</td>\n",
       "      <td>-0.071389</td>\n",
       "      <td>Antarctica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AR</td>\n",
       "      <td>-38.416097</td>\n",
       "      <td>-63.616672</td>\n",
       "      <td>Argentina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>AS</td>\n",
       "      <td>-14.270972</td>\n",
       "      <td>-170.132217</td>\n",
       "      <td>American Samoa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID_País    Latitud    Longitud                Nombre\n",
       "0       AD  42.546245    1.601554               Andorra\n",
       "1       AE  23.424076   53.847818  United Arab Emirates\n",
       "2       AF  33.939110   67.709953           Afghanistan\n",
       "3       AG  17.060816  -61.796428   Antigua and Barbuda\n",
       "4       AI  18.220554  -63.068615              Anguilla\n",
       "5       AL  41.153332   20.168331               Albania\n",
       "6       AM  40.069099   45.038189               Armenia\n",
       "7       AN  12.226079  -69.060087  Netherlands Antilles\n",
       "8       AO -11.202692   17.873887                Angola\n",
       "9       AQ -75.250973   -0.071389            Antarctica\n",
       "10      AR -38.416097  -63.616672             Argentina\n",
       "11      AS -14.270972 -170.132217        American Samoa"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Coordenadas.columns = [\"ID_País\", \"Latitud\", \"Longitud\", \"Nombre\"]\n",
    "Coordenadas.head(12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "datos_nombre = Coordenadas[Coordenadas.Nombre.isin(unique_zipcodes)]\n",
    "datos_paises = Coordenadas[Coordenadas.ID_País.isin(unique_zipcodes)]\n",
    "all_data =pd.concat ([datos_nombre,datos_paises]).drop_duplicates().sort_values('Nombre')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID_País</th>\n",
       "      <th>Latitud</th>\n",
       "      <th>Longitud</th>\n",
       "      <th>Nombre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AF</td>\n",
       "      <td>33.939110</td>\n",
       "      <td>67.709953</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>58</th>\n",
       "      <td>DZ</td>\n",
       "      <td>28.033886</td>\n",
       "      <td>1.659626</td>\n",
       "      <td>Algeria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AR</td>\n",
       "      <td>-38.416097</td>\n",
       "      <td>-63.616672</td>\n",
       "      <td>Argentina</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>AU</td>\n",
       "      <td>-25.274398</td>\n",
       "      <td>133.775136</td>\n",
       "      <td>Australia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AT</td>\n",
       "      <td>47.516231</td>\n",
       "      <td>14.550072</td>\n",
       "      <td>Austria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>BH</td>\n",
       "      <td>25.930414</td>\n",
       "      <td>50.637772</td>\n",
       "      <td>Bahrain</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>BD</td>\n",
       "      <td>23.684994</td>\n",
       "      <td>90.356331</td>\n",
       "      <td>Bangladesh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>BY</td>\n",
       "      <td>53.709807</td>\n",
       "      <td>27.953389</td>\n",
       "      <td>Belarus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>BE</td>\n",
       "      <td>50.503887</td>\n",
       "      <td>4.469936</td>\n",
       "      <td>Belgium</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>BO</td>\n",
       "      <td>-16.290154</td>\n",
       "      <td>-63.588653</td>\n",
       "      <td>Bolivia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>BW</td>\n",
       "      <td>-22.328474</td>\n",
       "      <td>24.684866</td>\n",
       "      <td>Botswana</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>BR</td>\n",
       "      <td>-14.235004</td>\n",
       "      <td>-51.925280</td>\n",
       "      <td>Brazil</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>BG</td>\n",
       "      <td>42.733883</td>\n",
       "      <td>25.485830</td>\n",
       "      <td>Bulgaria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114</th>\n",
       "      <td>KH</td>\n",
       "      <td>12.565679</td>\n",
       "      <td>104.990963</td>\n",
       "      <td>Cambodia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>CM</td>\n",
       "      <td>7.369722</td>\n",
       "      <td>12.354722</td>\n",
       "      <td>Cameroon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>CA</td>\n",
       "      <td>56.130366</td>\n",
       "      <td>-106.346771</td>\n",
       "      <td>Canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>CL</td>\n",
       "      <td>-35.675147</td>\n",
       "      <td>-71.542969</td>\n",
       "      <td>Chile</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>CN</td>\n",
       "      <td>35.861660</td>\n",
       "      <td>104.195397</td>\n",
       "      <td>China</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>CO</td>\n",
       "      <td>4.570868</td>\n",
       "      <td>-74.297333</td>\n",
       "      <td>Colombia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>HR</td>\n",
       "      <td>45.100000</td>\n",
       "      <td>15.200000</td>\n",
       "      <td>Croatia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>CU</td>\n",
       "      <td>21.521757</td>\n",
       "      <td>-77.781167</td>\n",
       "      <td>Cuba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>CY</td>\n",
       "      <td>35.126413</td>\n",
       "      <td>33.429859</td>\n",
       "      <td>Cyprus</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>55</th>\n",
       "      <td>DK</td>\n",
       "      <td>56.263920</td>\n",
       "      <td>9.501785</td>\n",
       "      <td>Denmark</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>EC</td>\n",
       "      <td>-1.831239</td>\n",
       "      <td>-78.183406</td>\n",
       "      <td>Ecuador</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>EG</td>\n",
       "      <td>26.820553</td>\n",
       "      <td>30.802498</td>\n",
       "      <td>Egypt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ID_País    Latitud    Longitud       Nombre\n",
       "2        AF  33.939110   67.709953  Afghanistan\n",
       "58       DZ  28.033886    1.659626      Algeria\n",
       "10       AR -38.416097  -63.616672    Argentina\n",
       "13       AU -25.274398  133.775136    Australia\n",
       "12       AT  47.516231   14.550072      Austria\n",
       "22       BH  25.930414   50.637772      Bahrain\n",
       "18       BD  23.684994   90.356331   Bangladesh\n",
       "33       BY  53.709807   27.953389      Belarus\n",
       "19       BE  50.503887    4.469936      Belgium\n",
       "27       BO -16.290154  -63.588653      Bolivia\n",
       "32       BW -22.328474   24.684866     Botswana\n",
       "28       BR -14.235004  -51.925280       Brazil\n",
       "21       BG  42.733883   25.485830     Bulgaria\n",
       "114      KH  12.565679  104.990963     Cambodia\n",
       "44       CM   7.369722   12.354722     Cameroon\n",
       "35       CA  56.130366 -106.346771       Canada\n",
       "43       CL -35.675147  -71.542969        Chile\n",
       "45       CN  35.861660  104.195397        China\n",
       "46       CO   4.570868  -74.297333     Colombia\n",
       "95       HR  45.100000   15.200000      Croatia\n",
       "48       CU  21.521757  -77.781167         Cuba\n",
       "51       CY  35.126413   33.429859       Cyprus\n",
       "55       DK  56.263920    9.501785      Denmark\n",
       "59       EC  -1.831239  -78.183406      Ecuador\n",
       "61       EG  26.820553   30.802498        Egypt"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_data.head(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x864 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "plt.scatter(all_data.Longitud, all_data.Latitud, s=70, c=all_data.Latitud)\n",
    "plt.colorbar()\n",
    "ard = dict(arrowstyle=\"->\")\n",
    "plt.annotate('USA', xy = (-95.712891, 37.09024), \n",
    "               xytext = (-95.712891, 40), arrowprops = ard)\n",
    "plt.annotate('AUSTRALIA', xy = (133.775136, -25.274398), \n",
    "               xytext = (133.775136, -20), arrowprops= ard)\n",
    "plt.annotate('BRAZIL', xy = (-51.92528, -14.235004), \n",
    "               xytext = (-51.92528, -9.5), arrowprops= ard)\n",
    "plt.annotate('Cuba', xy = (-77.781167,21.521757 ), \n",
    "               xytext = (-77.781167, 26), arrowprops= ard)\n",
    "plt.annotate('BELGIUM', xy = (4.469936, 50.503887), \n",
    "               xytext = (9.469936, 38), arrowprops = ard)\n",
    "plt.annotate('CHINA', xy = (104.195397, 35.86166), \n",
    "               xytext = (104.195397, 39), arrowprops= ard)\n",
    "plt.annotate('NORUEGA', xy = (8.468946, 60.472024), \n",
    "               xytext = (8.468946, 63), arrowprops= ard)\n",
    "plt.annotate('Egypt', xy = (30.802498,26.820553), \n",
    "               xytext = (30.802498, 23), arrowprops= ard)\n",
    "plt.annotate('AFGHANISTAN', xy = (67.709953,33.939110), \n",
    "               xytext = (70.709953, 30), arrowprops= ard)\n",
    "plt.annotate('ARGENTINA', xy = (-63.616672,\t-38.416097), \n",
    "               xytext = (-63.616672, -36), arrowprops= ard)\n",
    "plt.annotate('ALGERIA', xy = (1.659626,\t28.033886), \n",
    "               xytext = (1.659626, 24), arrowprops= ard)\n",
    "plt.annotate('BOLIVIA', xy = (-63.588653,\t-16.290154), \n",
    "               xytext = (-63.588653, -6), arrowprops= ard)\n",
    "plt.annotate('ECUADOR', xy = (-78.183406,\t-1.831239), \n",
    "               xytext = (-63.588653, 8), arrowprops= ard)\n",
    "\n",
    "params = plt.gcf()\n",
    "plSize = params.get_size_inches()\n",
    "params.set_size_inches( (plSize[1] * 4, plSize[1] * 3) )\n",
    "\n",
    "plt.savefig(\"Map of Science.png\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
